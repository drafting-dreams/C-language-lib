#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define N 7		//顶点最大数目
char Ve[N];		//存放顶点信息
int n = 0, Vr[N][N] = { 0 };	//n:顶点个数

//建立图的邻接矩阵 
void CreateMatrix() {
	char ch;
	int i, m=0;
	FILE*fp = fopen("Graph.txt", "r");
	fscanf(fp, "%d,%d", &n, &m);		//读取顶点数和边数
	if (n > N)n = N;
	printf("\nn=%d m=%d\n", n, m);
	fscanf(fp, "%c",&ch);	
	fgets(Ve, n + 1, fp);		//读取数据元素
	printf("\nElements:%s\n", Ve);

	//读取边或弧的信息
	int v1, v2,w;
	for (i = 0; i < m; i++) {
		fscanf(fp, "%d,%d,%d", &v1, &v2, &w);
		if (v1 == v2 || v1 < 0 || v2 < 0) break;
		Vr[v1-1][v2-1] = w;
	}
	fclose(fp);
}//CreateMatrix

//输出图的邻接矩阵
void PrintMatrix() {
	printf("\nAdjacency Matrix:\n");
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			printf("%5d", Vr[i][j]);
		printf("\n");
	}

}//PrintMatrix

//访问第k个节点的函数描述
void Visit(int k) {
	printf("%c", Ve[k - 1]);
}//Visit

//从顶点k出发深度优先遍历连通图
void DFS(int k, int visited[N]) {
	Visit(k);
	visited[k - 1] = 1;
	for (int j = 0; j < n; j++)
		if (Vr[k - 1][j]>0 && !visited[j])
			DFS(j + 1, visited);
}//DFS

//从顶点k出发深度优先遍历图
void DFSTraverse(int k) {
	printf("\nDepth First Search\n");
	int visited[N] = { 0 };
	DFS(k, visited);
	for (int i = 0; i < n; i++) 
		if (!visited[i])DFS(i+1, visited);
	printf("\n\n");
}//DFSTraverse

//从顶点k出发广度优先遍历图
void BFS(int k) {
	printf("\nBreadth First Search:\n");
	int visited[N] = { 0 },count =0;
	while (count < n) {
		Visit(k);
		visited[k - 1] = 1;
		count++;
		int f = 0, r = 0, Q[N] = { 0 };
		Q[r++] = k - 1;
		while (r > f) {
			int i = Q[f++];
			for (int j = 0; j < n; j++) {
				if (Vr[i][j] > 0 && !visited[j]) {
					Visit(j + 1);
					visited[j] = 1;
					Q[r++] = j;
					count++;
				}
			}
		}
		if(count<n)		//如果根据一次广度遍历没有遍历完全
			for (int o = 0; o < n; o++) {
				if (!visited[o]) { k = o + 1; break; }
			}
	}	
	printf("\n\n");
}//BFS

//判断v1，v2是否连通
int path(int v1, int v2, int visited[N]) {
	Visit(v1);
	visited[v1 - 1] = 1;
	for (int i = 0; i < n; i++) {
		if (Vr[v1 - 1][i] > 0 && !visited[i]) {
			if (i == v2 - 1) {
				Visit(v2);
				return v2;
			}
			if (int x = path(i + 1, v2, visited)) return x;
		}
	}
	return 0;
}//Path

//判断v1,v2是否连通的主调函数
void path1() {
	int v1, v2;
	printf("Input v1,v2:");
	scanf("%d,%d", &v1, &v2);
	int k, visited[N] = { 0 };
	k = path(v1, v2, visited);
	if (!k)printf("\n%c->%c:No Path.\n", Ve[v1 - 1], Ve[v2 - 1]);
	printf("\n");
}//path1

void main() {
	CreateMatrix();
	PrintMatrix();
	DFSTraverse(1);
	BFS(1);
	path1();
}
